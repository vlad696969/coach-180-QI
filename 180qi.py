import os
import streamlit as st
from langchain_openai import ChatOpenAI
import openai
import json
from supabase import create_client, Client
from dotenv import load_dotenv
import hashlib
from datetime import date

# üåå Style cin√©matographique global
st.markdown("""
    <style>
        .block-container {
            padding-top: 2rem;
            padding-bottom: 2rem;
            color: #000000;
            font-family: 'Montserrat', sans-serif;
        }
        h1, h2, h3, h4, h5, h6 {
            font-weight: 800;
        }
        .stTextInput > div > div > input,
        .stSelectbox > div > div > div > div,
        .stTextArea > div > textarea {
            background-color: #f5f5f5;
            color: #000000;
        }
        .stSlider > div {
            color: #CD0D0D;
        }
        .stButton > button {
            background-color: #CD0D0D;
            color: white;
            border: none;
            border-radius: 6px;
            font-weight: bold;
        }
        ::-webkit-scrollbar {
            width: 8px;
        }
        ::-webkit-scrollbar-thumb {
            background: #CD0D0D;
            border-radius: 10px;
        }
    </style>
""", unsafe_allow_html=True)

st.title("üß† Coach P√©dagogique AI")
st.markdown("<h4 style='color:#CD0D0D;'>Un mentor. Un objectif. 60 jours pour tout ma√Ætriser.</h4>", unsafe_allow_html=True)

# üéÆ Vid√©o explicative de l‚Äôapplication dans un menu d√©pliant
with st.expander("üé© Comment utiliser cette application ?"):
    st.video("https://youtu.be/w5cDkYeAilw")
    st.markdown("<br><a href='https://platform.openai.com/signup' target='_blank'>üîë Cr√©er un compte et une cl√© API OpenAI ici</a>", unsafe_allow_html=True)

with st.expander(" Comprendre les mod√®les et la temp√©rature"):
    st.markdown("""
    ### Mod√®les GPT
    - **GPT-3.5 Turbo** : rapide et √©conomique.
    - **GPT-4** : plus lent mais plus performant.

    ### üí∞ Tarification indicative
    <div style='margin-left: 1rem;'>
        <ul>
            <li><strong>GPT-3.5 Turbo</strong> : <code>~0.50 $</code> / <em>1M tokens (input)</em>, <code>~1.50 $</code> / <em>1M tokens (output)</em></li>
            <li><strong>GPT-4</strong> : <code>~10 $</code> / <em>1M tokens (input)</em>, <code>~30 $</code> / <em>1M tokens (output)</em></li>
        </ul>
    </div>

    ### Temp√©rature ("Creativity")
    - <strong>0.0 √† 0.3</strong> ‚Üí R√©ponses tr√®s fiables, peu cr√©atives (logique, math, code)
    - <strong>0.4 √† 0.7</strong> ‚Üí Bon √©quilibre logique / cr√©ativit√©
    - <strong>0.8 √† 1.0</strong> ‚Üí R√©ponses plus libres, narratives, parfois moins pr√©cises
    """, unsafe_allow_html=True)

# Chargement des variables d'environnement
load_dotenv()
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")

supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

def get_user_hash(api_key):
    return hashlib.sha256(api_key.encode()).hexdigest()

PROMPT_MAITRE = '''
## üß† **PROMPT OPTIMIS√â : Programme de 60 jours pour ma√Ætriser n‚Äôimporte quel domaine**

**Ton r√¥le :**  
Tu es un mentor personnel et un coach d‚Äôapprentissage avec un QI de 180, expert absolu dans la p√©dagogie efficace.  
Tu m'accompagnes pendant **60 jours** afin que je devienne comp√©tent(e) dans le domaine pr√©cis suivant : **[sujet pr√©cis √† compl√©ter]**.

Tu dois syst√©matiquement viser l‚Äôefficacit√© maximale :

- Va √† l‚Äôessentiel et ignore tout ce qui est superficiel.
- Priorise uniquement les m√©thodes et ressources ayant le meilleur ratio temps/r√©sultat.
- D√©compose les concepts complexes en √©tapes claires et accessibles.
- Identifie et corrige rapidement mes blocages et mes angles morts.
- Stimule ma r√©flexion autonome plut√¥t que de simplement fournir des r√©ponses toutes faites.
- N'accepte aucune excuse ou procrastination.

---

### Programme initial √† √©tablir ensemble (1 fois au d√©but des 60 jours) :

**√âtape 1 : Diagnostic et objectif**

- √âvalue mes connaissances actuelles par des questions pr√©cises et rapides.
- D√©finit avec moi un objectif final pr√©cis, ambitieux mais r√©aliste, atteignable en 60 jours.
- D√©finit avec moi combien de temps je suis pr√™t √† consacrer √† cet apprentissage tout les jours

**√âtape 2 : Cr√©ation du programme**

- D√©coupe clairement l‚Äôobjectif en sous-comp√©tences cl√©s √† ma√Ætriser.
- √âtablis une feuille de route pr√©cise et concr√®te (comp√©tences √† acqu√©rir par semaine).
- Recommande-moi UNE ressource principale seulement (livre OU formation vid√©o OU autre) qui couvre efficacement l'ensemble du sujet.
- Encourage moi √† discuter ce programme pour l‚Äôadapter √† mes besoins sp√©cifiques.
---

### Accompagnement r√©gulier (toutes les semaines) :

Chaque semaine, tu devras :

- M'indiquer clairement les comp√©tences cl√©s √† ma√Ætriser durant cette semaine.
- Me fournir des exercices pratiques √† difficult√© progressive (avec feedback imm√©diat).
- Me soumettre √† des petits d√©fis pratiques ou √©tudes de cas r√©alistes qui stimulent l'int√©gration de mes connaissances dans la vie r√©elle.

---

### Interaction quotidienne (chaque s√©ance d'√©tude) :

√Ä chaque interaction :

- M'encourager √† poser des questions et √† interagir avec toi
- Pose-moi des questions cibl√©es pour mesurer pr√©cis√©ment ma compr√©hension.
- Ajuste imm√©diatement le programme ou les exercices en fonction de mes r√©ponses.
- Aide-moi √† r√©soudre concr√®tement mes difficult√©s sp√©cifiques avec des analogies simples et puissantes.
'''

st.markdown("Entrez votre cl√© OpenAI pour commencer :")
api_key = st.text_input("Cl√© API OpenAI", type="password")

model_choice = st.selectbox("Choisissez le mod√®le :", ["gpt-3.5-turbo", "gpt-4"])

temp = st.slider("üéØ Niveau de cr√©ativit√© (temp√©rature)", 0.0, 1.0, 0.5, 0.1)

@st.cache_data(show_spinner=False)
def test_api_key(key, model):
    try:
        client = openai.OpenAI(api_key=key)
        client.chat.completions.create(
            model=model,
            messages=[{"role": "user", "content": "Dis juste OK"}]
        )
        return True, "Cl√© fonctionnelle."
    except Exception as e:
        return False, str(e)

if api_key:
    valid, info = test_api_key(api_key, model_choice)
    if valid:
        st.success(f"‚úÖ Cl√© API valide")
        chat = ChatOpenAI(api_key=api_key, temperature=temp, model=model_choice)
        user_hash = get_user_hash(api_key)

        if "chat_history" not in st.session_state:
            response = supabase.table("user_history").select("messages").eq("id", user_hash).execute()
            st.session_state.chat_history = response.data[0]["messages"] if response.data else [{"role": "system", "content": PROMPT_MAITRE}]

        messages = st.session_state.chat_history

        total_days = 60

        # üìä Nouvelle logique de progression : jours uniques
        today = date.today().isoformat()
        progress = supabase.table("progress_logs")\
            .select("date")\
            .eq("user_hash", user_hash)\
            .execute()
        unique_days = set(entry["date"] for entry in progress.data)
        already_logged_today = today in unique_days

        if not already_logged_today:
            unique_days.add(today)

        completed_days = len(unique_days)

        st.progress(completed_days / total_days, text=f"üóì {completed_days} jours compl√©t√©s sur {total_days}")

        # üìì Journal des 3 derniers jours
        with st.expander("üìì Journal des 3 derniers jours"):
            progress = supabase.table("progress_logs")\
                .select("*")\
                .eq("user_hash", user_hash)\
                .order("day_number", desc=True)\
                .limit(3)\
                .execute()

            logs = progress.data

            if not logs:
                st.info("Aucune interaction enregistr√©e pour le moment.")
            else:
                for entry in reversed(logs):
                    st.markdown(f"""
                    <div style='background-color:#f8f8f8; padding:1rem; margin-bottom:1rem; border-left: 5px solid #CD0D0D; border-radius:8px;'>
                        <h5 style='color:#CD0D0D;'>üóì Jour {entry['day_number']} ‚Äî {entry['date']}</h5>
                        <p><strong>üë§ Toi :</strong><br>{entry['question']}</p>
                        <p><strong>üßê Coach :</strong><br>{entry['response']}</p>
                    </div>
                    """, unsafe_allow_html=True)

        st.markdown("## üí¨ Discute avec ton coach")
        user_input = st.chat_input("Pose ta question... (Maj+Entr√©e pour une nouvelle ligne)")

        if user_input:
            messages.append({"role": "user", "content": user_input})
            with st.spinner("ü§î Le coach r√©fl√©chit..."):
                response = chat.invoke(messages)
                assistant_reply = response.content
            messages.append({"role": "assistant", "content": assistant_reply})
            supabase.table("user_history").upsert({"id": user_hash, "messages": messages}).execute()
            st.session_state.chat_history = messages

            if not already_logged_today:
                supabase.table("progress_logs").insert({
                "user_hash": user_hash,
                "day_number": completed_days,
                "date": today,
                "question": user_input,
                "response": assistant_reply
            }).execute()

            st.markdown(f"""
            <div style='background-color:#f5f5f5; padding:1rem; border-left: 5px solid #CD0D0D; border-radius:8px;'>
                <strong style='color:#000000;'>üë§ Toi :</strong><br>{user_input}
            </div>
            <div style='background-color:#eaeaea; padding:1rem; border-left: 5px solid #CD0D0D; margin-top:0.5rem; border-radius:8px;'>
                <strong style='color:#CD0D0D;'>üßê Coach :</strong><br>{assistant_reply}
            </div>
            """, unsafe_allow_html=True)

    else:
        st.error(f"‚ùå Cl√© API invalide : {info}")
